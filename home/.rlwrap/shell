#!/usr/bin/env perl
## Mac Radigan
## shell - an rlwrap filter

use strict;
use warnings;

use lib $ENV{RLWRAP_FILTERDIR};
use lib '/usr/share/rlwrap/filters';
use lib '/usr/local/share/rlwrap/filters';

use RlwrapFilter;
use Term::ANSIColor qw(:constants);

my $debug = 0;
if ($debug) {
  use Data::Dumper;
}

my $filter = new RlwrapFilter;

$filter->prompt_handler(\&prompt);
$filter->completion_handler(\&complete);
$filter->output_handler(\&output);
$filter->input_handler(\&input);
$filter->cloak_and_dagger_verbose($debug);
$filter->run;

sub prompt {
  my ($prompt) = @_;
  #$prompt = '>>> ';
  return $prompt;
}

sub complete {
  my($line, $prefix, @completions) = @_;
  my $files;
  my $file;
  my $s0;
  my $lcs;
  if($line =~ /^(.*)(\.\/.*$)/g && $2)
  {
    my $pre = $1;
    my $pattern = $2;
    my @files = glob($pattern.'*');
    $s0 = $pattern;
    foreach $file (@files)
    {
      "$s0\0$file" =~ m/^([^\0]*)(?>[^\0]*)\0\1/s;
      $s0 = $file;
      $lcs = $1;
    }
    #push @completions, $files[0];
    #push @completions, substr($lcs,2);
    push @completions, @files;
  }
  elsif($line =~ /^(.*)(\/.*$)/g && $2)
  {
    my $pre = $1;
    my $pattern = $2;
    my @files = glob($pattern.'*');
    $s0 = $pattern;
    foreach $file (@files)
    {
      "$s0\0$file" =~ m/^([^\0]*)(?>[^\0]*)\0\1/s;
      $s0 = $file;
      $lcs = $1;
    }
    #push @completions, $files[0];
    #push @completions, substr($lcs,1);
    push @completions, @files;
  }
  return @completions;
}

sub output {
  my ($out) = @_;
  return $out;
}

sub input {
  my ($in) = @_;
  my $cmd;
  my $editor = $ENV{EDITOR} || 'vim';
  if($editor =~ /^vim$/)
  {
    $editor = 'vim -O'
  }
  if($in =~ /^:!.*/ || $in =~ /^!!.*/) 
  { 
    $cmd = substr($in,2);
    $cmd =~ s/^\s+|\s+$//g;
    system $cmd;
    return '';
  } 
  elsif($in =~ /^:e.*/)
  {
    $cmd = substr($in,2);
    #system $editor => $cmd;
    $cmd = "$editor ".substr($in,2);
    system $cmd;
    return '';
  }
  elsif($in =~ /^:q.*/)
  {
    return '';
  }
  else 
  {
    return $in;
  }
}

## *EOF*
